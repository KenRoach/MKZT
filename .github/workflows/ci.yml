name: CI/CD Pipeline

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: whatsapp_bot_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      # Add redis if needed for integration tests
      # redis:
      #   image: redis:6
      #   ports:
      #     - 6379:6379

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Install Linting/Formatting tools
      run: poetry add --group dev flake8 black isort pytest-cov

    - name: Run Linting and Formatting Checks
      run: |
        poetry run flake8 src tests
        poetry run black . --check
        poetry run isort . --check-only --diff

    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/whatsapp_bot_test
        # REDIS_URL: redis://localhost:6379 # Uncomment if redis service is enabled
        TESTING: true # Example flag for tests
        # Add other strictly necessary env vars for testing here
      run: poetry run pytest --cov=src --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }} # Optional: Add Codecov token if needed

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/whatsapp-bot:${{ github.sha }} # Use your ECR repo name
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to ECS
      id: deploy-ecs
      run: |
        aws ecs update-service \
          --cluster whatsapp-bot-cluster \
          --service whatsapp-bot-service \
          --force-new-deployment \
          --no-cli-pager
      # Add --task-definition if you manage task defs separately

    - name: Wait for ECS service stability
      run: |
        aws ecs wait services-stable \
          --cluster whatsapp-bot-cluster \
          --service whatsapp-bot-service \
          --no-cli-pager

    - name: Notify on Failure
      if: failure()
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Deployment Failed for commit: ${context.sha}`,
            body: `The deployment triggered by commit ${context.sha} failed. Please check the workflow logs: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
          }) 